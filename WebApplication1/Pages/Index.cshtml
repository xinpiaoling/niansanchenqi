@page
<head>

    The world never remember little people!!!

</head>



<body>






    <script>

        //console.log= （(23 + 7)*12 - 8）/6;


    </script>
    <script>

        //var sum = 0;
        //var i = 0;
        //while (i < 101) {

        //    sum = sum + i;
        //    i = i + 2;

        //}

        //console.log(sum);





    </script>
    <script>
        //for (var i = 1; i < 100; i++)
        //    console.log()
        //    if(i/100)




    </script>
    <script>
        //数组循环

        //var student = ['a', 'b', 'c', 'd', 'e'];

        //for (var i = 0; i < student.length; i++) {
        //    console.log(student[i]);

        //}


    </script>

    <script>
        //var scores = [77, 80, 3, 89, 20, 50, 56, 10, 105];

        //for (var i = 0; i < scores.length; i++) {
        //    if (scores[i] > scores[i + 1]) {
        //        var temp = scores[i];
        //        scores[i] = scores[i + 1];
        //        scores[i + 1] = temp;

        //        for (var j = i; j > 0; j--) {
        //            if (scores[j] < scores[j - 1]) {
        //                var tempj = scores[j];
        //                scores[j] = scores[j - 1];
        //                scores[j - 1] = tempj;

        //            } else {
        //                break;


        //            }

        //        }

        //    }

        //}

        //console.log(scores);
    </script>

    <script>
        //var score = [76, 48, 86, 45, 23, 98];
        //for (var i = 0; i < score.length;i++) {
        //    if (score[i] > score[i + 1]) {
        //        var middle = score[i];
        //        score[i] = score[i + 1];
        //        score[i + 1] = middle;


        //        for (var j = i; j < score.length - 1;) {
        //            if (score[j] > score[j - 1]) {




        //            }


        //        }
        //    }






        //}







    </script>
    @*9.2日*@
    <script>
        //function add(a, b) {                   //parament参数    declare声明
        //    console.log(a +b);
        //    return;
        //}

        //add(3,5)

    </script>

    <script>
        //function add(a, b) {
        //    return a + b;

        //}
        //var result = add(3, 8);
    </script>


    <script>
        //var sum = function (a, b) {
        //    if (arguments.length !== 2)
        //        return false





        //}


    </script>







    <script>
        var a = 8;
        function double(number) {
            return number *= 2;
        }
        b = double(a);
        console.log(a);
        console.log(b);






    </script>
    <script>

        //console.log('薛明林说 ："老师\'好\'
        var atai = '阿泰真帅,蟋蟀的蟀';
        atai[3] = '不';        //只能取出查看，不能更改
        atai.substing(2, 3);   //截取范围内的字符串

        atai.indexOf(',');    //取出值的位数
        atai.substring(0, indexOf'，'); //取出0位到，位置的中间的所有值
        atai.replace('帅','蟀')
    </script>





    @*1.将之前“找出素数”的代码封装成一个函数findPrime(max)，可以打印出max以内的所有素数*@
    <script>
            //function findPrime(max) {
            //    console.log(2);                                         //素数2单独列出
            //    for (var x = 2; x < max; x++) {                         //定义参数x为所素数，设置x的取值范围为【2—max】
            //        for (var i = 2; i < x; i++) {                       //定义参数i为中间参数
            //            if (x % i === 0) {                              //若x可以整除i，则x不为素数
            //                //console.log(x + 'not primary');
            //                break;                                      //中止此次循环判断
            //            } else {                                        //若x不可以整除i，则i+1，继续使用x整除进行判断是否有余值
            //                if (i === x - 1) {                          //直到i变为比x小一位的数字停止
            //                    console.log(x);                         //若x一直不能被i整除,且当ii变为比x小一位的数字时候，可以判断x为素数，进行输出
            //                }
            //            }
            //        }
            //    }
            //}
            //    findPrime(100);

            //return;c        }

            //console.log(2);
            //        for (var x=2; x < 100; x++) {           //定义参数x为所求素数，设置x的取值范围为【2—100】
            //            for (var i=2; i < x; i++) {         //定义参数i为中间值
            //                if (x % i === 0) {                //若x可以整除i，则x不为素数
            //                    //console.log(x + 'not primary');
            //                    break;                        //中止此次循环判断
            //                } else {                          //若x不可以整除i，则i+1，继续使用x整除进行判断是否有余值
            //                    if (i === x - 1) {            //直到i变为比x小一位的数字停止
            //                        console.log(x);           //若x一直不能被i整除,且当ii变为比x小一位的数字时候，可以判断x为素数，进行输出


            //                    }

            //                }

            //            }

            //        }


    </script>





    @*2.执行设计参数，将之前“累加求和”的代码封装成一个函数Sum()，
        可以计算任意起始位置、任意步长（如：1,3,5……或者0,5,10,15……）的等差数列之和。*@
    <script>
            //function sum(i, j, m, k) {      //i为起始数字，j为最后输出数字，m为步长，k为范围
            //    while (i < k) {
            //        j = j + i;
            //        i = i + m;
            //    }
            //    console.log(j);
            //    return;
            //}
            //var result = sum(0, 0, 10, 101)

    </script>
    @*3.封装一个函数，建立一个函数getMaxNumber()，可以接受任意多各种类型（整数、小数、正数、负数、字符串、布尔值等）
        的参数，并找出里面最大的数（忽略其他类型）*@
    <script>

            //console.log(typeof arguments);
            //function test(a) {
            //    console.log(a,)









            //}
            //function getMaxNumber() {
            //    for (var i = 0; i < getMaxNumber.length; i++) {
            //        if (typeof getMaxNumber[i] === number) {
            //            if (getMaxNumber[i] > getMaxNumber[i + 1]) {
            //                max = getMaxNumber[i];
            //                getMaxNumber[i] = getMaxNumber[i + 1];
            //                getMaxNumber[i + 1] = max;

            //            }
            //            console.log(max);

            //        } else {
            //            break;





            //        }


            //    }

            //}
            //    getMaxNumber(null, undefined, true, 2.378, 9, 88, 55, '源栈', {}, 'qkwk')
    </script>




</body>
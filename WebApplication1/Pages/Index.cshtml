@page
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    @*The world never remember little people!!!*@
    @*<script type="text/javascript" src="~/js/9.8 homework.js"></script>*@
    @*<script type="text/javascript" src="~/js/JavaScript-4作用域.js"></script>*@
    <script type="text/javascript" src="~/js/JavaScript-5BOM.js"></script>
</head>



<body>






    <script>

                        //console.log= （(23 + 7)*12 - 8）/6;


    </script>
    <script>

                        //var sum = 0;
                        //var i = 0;
                        //while (i < 101) {

                        //    sum = sum + i;
                        //    i = i + 2;

                        //}

                        //console.log(sum);

                        //var sum = 0;
                        //for (var i = 0; i < 101;i++) {
                        //    sum = sum + i;

                        //}
                        //console.log(sum);

    </script>
    <script>
                        //for (var i = 1; i < 100; i++)
                        //    console.log()
                        //    if(i/100)




    </script>
    <script>
                        //数组循环

                        //var student = ['a', 'b', 'c', 'd', 'e'];

                        //for (var i = 0; i < student.length; i++) {
                        //    console.log(student[i]);

                        //}


    </script>

    <script>
                        //var scores = [77, 80, 3, 89, 20, 50, 56, 10, 105];

                        //for (var i = 0; i < scores.length; i++) {
                        //    if (scores[i] > scores[i + 1]) {
                        //        var temp = scores[i];
                        //        scores[i] = scores[i + 1];
                        //        scores[i + 1] = temp;

                        //        for (var j = i; j > 0; j--) {
                        //            if (scores[j] < scores[j - 1]) {
                        //                var tempj = scores[j];
                        //                scores[j] = scores[j - 1];
                        //                scores[j - 1] = tempj;

                        //            } else {
                        //                break;


                        //            }

                        //        }

                        //    }

                        //}

                        //console.log(scores);
    </script>

    <script>
                        //var score = [76, 48, 86, 45, 23, 98];
                        //for (var i = 0; i < score.length;i++) {
                        //    if (score[i] > score[i + 1]) {
                        //        var middle = score[i];
                        //        score[i] = score[i + 1];
                        //        score[i + 1] = middle;


                        //        for (var j = i; j < score.length - 1;) {
                        //            if (score[j] > score[j - 1]) {




                        //            }


                        //        }
                        //    }






                        //}







    </script>
    @*9.2日*@
    <script>
                        //function add(a, b) {                   //parament参数    declare声明
                        //    console.log(a +b);
                        //    return;
                        //}

                        //add(3,5)

    </script>

    <script>
                        //function add(a, b) {
                        //    return a + b;

                        //}
                        //var result = add(3, 8);
    </script>


    <script>
                        //var sum = function (a, b) {
                        //    if (arguments.length !== 2)
                        //        return false





                        //}


    </script>






    @*值传递和值/引用类型*@
    <script>
                        //var a = 4;
                        //function double(number) {
                        //    number *=2;
                        //}
                        //double(a);
                        //console.log(a);     //改变的是复制的变量的值，本身还是没有改变。
                        //值类型的传递
                        //var obj = {a:8};
                        //function double(number) {
                        //    number.a *= 2;
                        //}
                        //double(obj);
                        //console.log(obj.a);   //obj是引用这个a,这个是存在a的地址，改变了a里面的值，所以引用的时候改变了

                        //两者的区别在于是否是对象，，引用。。。。。还是有点混乱。。。
                        //引用类型的传递
    </script>

    <script>

                        //var a = 8, b = 3;
                        //var c = [a, b];
                        //function swap(c,a, b) {
                        //    var temp = c[a];
                        //    c[a] =c[b];
                        //    c[b] = temp;

                        //}
                        //swap(c,0,1);                //利用数组下标，引用对象里面的值，原来的值a=8没有变化，引用后的c[a]=3;
                        //console.log('a=' +c[0]);    //输出结果为a=3,其实a本身的值为8，只是c[0]的值为3
                        //console.log('b=' +c[1]);    //同上，c[1]=8...这是值/引用类型和直接值传递的区别



    </script>
    @*字符串的定义操作*@
    <script>
                        //console.log('他对老师说:"老师\'好\'"');
                        //console.log('"');  //输出一个”
                        //console.log('"\''); //输出"'
                        //console.log('\t源栈你好');   //输出结果会偏移4个字符，\t是偏移字符
                        //console.log('源栈你好\n!');   //输出结果为源栈你好
                        //                           //                ！
                        //                           // \n是换行字符
                        //console.log('\x41');        //输出结果为A，这是特指字符编码
                        //console.log('\u4e2d\u6587'); //输出结果为中文
                        //console.log(`飞哥'真"帅"啊!'`);  //反引号。输出结果为飞哥'真"帅"啊!'
                        //console.log(`飞哥'真
                        //                  "帅"啊!'`);      //输出结果为正常换行，不会报错

                        //var people = '汪峰';
                        //alert(`hello + ${people}!`);     // 输出结果hello 汪峰
                        //'大飞哥真帅'.length;              //输出字符串的长度，5
                        //'大飞哥真""""帅'.length;          //输出字符串的长度，9
                        //var atai = '阿泰真帅,蟋蟀的蟀！';
                        //atai.length[2] = '真';             //输出真,输入下标可以取出值
                        //atai.length[2] = '不';           //可以取出值，但不可以更改
                        //atai.substring(0, 2);              //输入下标，截取字符串，输出为阿泰真
                        //atai.indexOf(',');                 //indeOf为查找字符的下标
                        //atai.substring(0, indexOf(','));    //substring和indexOf可以配合使用
                        //atai.replace('蟀','帅')；            //replace为替换，但是只替换第一个字符，后面相同的字符不替换
                        //var name = 'S3mv';
                        //name.toUpperCase（）;                //全部转换为大写
                        //name.toLowerCase（）;                 //全部转换为小写

                        //var fee = 986;
                        //fee.tostring();                     //转换为字符串
                        //typeof fee.tostring();               //输出为string
                        //true.tostring                       //输出为true，无法转换。同理NaN,undefined
    </script>




    @*Math和数组函数*@
    <script>
                        //查找内置函数，前端知识可以去MDN网站
                        //Math.abs(-10);                   //取绝对值,输出为10
                        //Math.ceil(8.1);                  //取整，向上取，输出为9
                        //Math.floor(8.9);                 //取整，向下取，输出为8
                        //Math.round(8.4);                 //取整，四舍五入，输出为8
                        //(8.5541366).toFixed(2);          //设置小数精度，保留2位数，，输出为8.56
                        //Math.random();                    //取0-1之间的随机数
                        //Math.floor(Math.random（）*1001)   //取正整数的方法，0-1000
                        //parseInt('365.78abc');               //转换为整数，能转多少转多少,输出为365
                        //+365.75；                           //+号与（''）的区别，必须为数字能转才会转
                        //parseInt('0-365');                 //输出为
                        //parseInt(0 - 365);
                        //parseFloat(0 - '365.78');          //输出为-365.78
                        //parseFloat('0 - 365.78');           //输出为0
                        //typeof parseFloat(3 / 6);           //输出为number
                        //parseFloat(3 / 6);                  //输出为0.5
                        //parseFloat(3 / 7);                  //输出为0.42857...
                        //parseInt(string, radix);             //parseInt为将一个字符串string转换为radix进制的整数，radix介于2-36之间
                        //parseInt('100011', 2);               //将字符串2进制转换为10进制表现出来，输出为35



                        //var arr = [3, 5, 48, 75, 105];
                        //arr.length = 10;                //length可以加长数组的长度，也可以截断数组，输出为arr = [3, 5, 48, 75, 105，empty*5]
                        //arr.length = 3;                 //输出为arr = [3, 5, 48]
                        //arr[8] = NaN;                   //添加第8位的值为NaN
                        //arr;                           //arr = [3, 5, 48, empty*5,NaN]
                        //arr.indexof(5);                 //indexOf为查找下标，有重复数字的，它只能找到第一个，输出为1
                        //arr.indexof(undefined);         //与null一样，输出为-1
                        //arr.slice(2, 4);                //截取字符串，和substring一样，输出为arr=[48,empty]
                        //arr.push(true);                  //在arr尾部添加字符串
                        //arr.pop();                       //从arr尾部删减一个字符串，一次一个
                        //arr.shift();                     //在arr头部删除一个字符串，一次一个
                        //arr.unshift('源栈','欢迎你');      //从arr头部添加字符串
                        //[1, 18, 7, 95, 2].sort();          //按照字符编码排序，不是数字大小。输出为[1,18,2,7,95]
                        //[1, 18, 7, 95, 2].sort(function ());  //在里面定义一个函数，这样可以比较数字大小，进行排序
                        //arr.concat(false, 88);               //连接两个数组，添加一个副本，如输出结果添加了false,888两个元素，但是arr本身的数组是没有变化的






    </script>
    @*for-in和数组结构*@
    <script>
                        //var obj = { name: '新', age: 18, hobby: '编程' };
                        //for (var item in obj); {
                        //console.log(item);
                        //}
                        ////for(  in   ){  }       是遍历对象内属性
                        ////输出为name







                        //var [name,age,female]=['飞哥',18,true]





    </script>


    @*<script>

            //console.log('薛明林说 ："老师\'好\'
            var atai = '阿泰真帅,蟋蟀的蟀';
            atai[3] = '不';        //只能取出查看，不能更改
            atai.substing(2, 3);   //截取范围内的字符串

            atai.indexof(',');    //取出值的位数
            atai.substring(0, indexof'，'); //取出0位到，位置的中间的所有值
            atai.replace('帅','蟀')
        </script>*@





    @*1.将之前“找出素数”的代码封装成一个函数findPrime(max)，可以打印出max以内的所有素数*@
    <script>
                        //function findPrime(max) {
                        //    console.log(2);                                         //素数2单独列出
                        //    for (var x = 2; x < max; x++) {                         //定义参数x为所素数，设置x的取值范围为【2—max】
                        //        for (var i = 2; i < x; i++) {                       //定义参数i为中间参数
                        //            if (x % i === 0) {                              //若x可以整除i，则x不为素数
                        //                //console.log(x + 'not primary');
                        //                break;                                      //中止此次循环判断
                        //            } else {                                        //若x不可以整除i，则i+1，继续使用x整除进行判断是否有余值
                        //                if (i === x - 1) {                          //直到i变为比x小一位的数字停止
                        //                    console.log(x);                         //若x一直不能被i整除,且当ii变为比x小一位的数字时候，可以判断x为素数，进行输出
                        //                }
                        //            }
                        //        }
                        //    }
                        //}
                        //    findPrime(100);

                        //return;c        }

                        //console.log(2);
                        //        for (var x=2; x < 100; x++) {           //定义参数x为所求素数，设置x的取值范围为【2—100】
                        //            for (var i=2; i < x; i++) {         //定义参数i为中间值
                        //                if (x % i === 0) {                //若x可以整除i，则x不为素数
                        //                    //console.log(x + 'not primary');
                        //                    break;                        //中止此次循环判断
                        //                } else {                          //若x不可以整除i，则i+1，继续使用x整除进行判断是否有余值
                        //                    if (i === x - 1) {            //直到i变为比x小一位的数字停止
                        //                        console.log(x);           //若x一直不能被i整除,且当ii变为比x小一位的数字时候，可以判断x为素数，进行输出


                        //                    }

                        //                }

                        //            }

                        //        }


    </script>





    @*2.执行设计参数，将之前“累加求和”的代码封装成一个函数Sum()，
        可以计算任意起始位置、任意步长（如：1,3,5……或者0,5,10,15……）的等差数列之和。*@
    <script>
                        //function sum(i, j, m, k) {      //i为起始数字，j为最后输出数字，m为步长，k为范围
                        //    while (i < k) {
                        //        j = j + i;
                        //        i = i + m;
                        //    }
                        //    console.log(j);
                        //    return;
                        //}
                        //var result = sum(0, 0, 10, 101)

    </script>
    @*3.封装一个函数，建立一个函数getMaxNumber()，可以接受任意多各种类型（整数、小数、正数、负数、字符串、布尔值等）
        的参数，并找出里面最大的数（忽略其他类型）*@
    <script>
                        //使用测试用例，确定边界条件





                        //function getMaxNumber() {
                        //    var result = -Infinity;
                        //    for (var i = 0; i < arguments.length; i++) {
                        //        if (typeof arguments[i] === typeof 0) {
                        //            if (arguments[i] > result) {
                        //                result = arguments[i];
                        //            }
                        //        }
                        //    }
                        //    return result;
                        //}

                        //var max = getMaxNumber(2,54,5,62,7,NaN,false,Infinity);
                        //console.log("最大值为：" + max);



    </script>


    <script>
                        //4.封装一个函数Swap(arr, i, j)，可以交换数组arr里下标 i 和 j 的值
                        //var arr = [3, 8];
                        //function Swap(arr, i, j); {
                        //    var temp = arr[0];
                        //    arr[0] = arr[1];
                        //    arr[1] = temp;
                        //}


                        //Swap(arr, 0, 1);
                        //console.log(arr[0]);
                        //console.log(arr[1]);

    </script>

    <script>
                        //5.利用上面的Swap()函数，将“冒泡排序”封装成函数bubbleSort()

                        //var scores = [77, 80, 3, 89, 20, 50, 56, 10, 105];

                        //for (var i = 0; i < scores.length; i++) {
                        //    if (scores[i] > scores[i + 1]) {
                        //        var temp = scores[i];
                        //        scores[i] = scores[i + 1];
                        //        scores[i + 1] = temp;

                        //        for (var j = i; j > 0; j--) {
                        //            if (scores[j] < scores[j - 1]) {
                        //                var tempj = scores[j];
                        //                scores[j] = scores[j - 1];
                        //                scores[j - 1] = tempj;

                        //            } else {
                        //                break;
                        //            }

                        //        }

                        //    }

                        //}

                        //console.log(scores);






    </script>

    <script>

                        //6.将源栈同学姓名/昵称装入数组，再根据该数组输出共有多少同学
                        //arr = ['薛明林', '冯志强', '余为谦', '阿泰'];
                        //console.log(arr.length);








    </script>

    <script>
                        //7.在上述数组头部加上小鱼老师，末尾加上大飞哥

                        //arr = ['薛明林', '冯志强', '余为谦', '阿泰'];
                        //arr.unshift('小鱼老师');
                        //arr.push('大飞哥');








    </script>

    <script>
                        //8.删除一个数组里面重复的元素

                        //测试用例：
                        //array=[50,829,583,50,22]     //删除第一个元素，还是删除第二个元素
                        //array=[50,829,583,'50',22]   //是否'50'和50是重复元素
                        //array=[NaN,829,583,'50',NaN,22]   //NaN值能判断么
                        //需求文档不明确，需要写出测试用例，确定边界条件，函数范围

                        //var array = [50, 829, 583, 50, 22];
                        //function repet(array) {
                        //    let result = [20];
                        //    for (var i = 0; i < array.length; i++) {
                        //        for (var j = 1; j < array.length; j++) {
                        //            if (array[i] == array[j]) {
                        //                result.push( array[i]);
                        //            }
                        //        }
                        //    }
                        //    return result;
                        //    console.log(result);
                        //}







    </script>


    <script>
                        //9使用JavaScript内置字符串函数，处理 “‘源栈’：飞哥小班教学，线下免费收看” ：“飞哥”改成“大神”，“线下”改成“线上”。
                        //var replaceText = ('"源栈"：飞哥小班教学，线下免费收看');
                        //replaceText = replaceText.replace("飞哥","大神");
                        //replaceText = replaceText.replace('线下','线上');

                        //var string ="源栈：飞哥小班教学，线下免费收看";
                        //string = string.replace("飞哥", "大神");
                        //string = string.replace("线下", "线上");


                        //对于什么时候使用小括号，什么时候使用中括号
                        //函数格式问题，如replace（"",""）的双引号

    </script>

    <script>
                        // 10.将数组['why','gIT','vs2019','community','VERSION']规范化，所有字符串：
                        //首字母大写开头，其他字母小写
                        //截去超过6个字符的部分，如'community'将变成'Commun'
                        //function stand(str) {
                        //    var arr = [];
                        //    for (var i = 0; i < str.length; i++) {
                        //        arr[i] = str[i].toLowerCase().substring(0, 6);
                        //        arr[i] = arr[i][0].toUpperCase() + arr[i].substring(1, 6);
                        //    }
                        //    return arr;
                        //}
                        //var str = ['why', 'gIT', 'vs2019', 'community', 'VERSION'];
                        //var result = stand(str);
    </script>
    <script>
                        //11.创建一个函数getRandomArray(length, max)，能返回一个长度不大于length，每个元素值不大于max的随机整数数组
                        //测试1
                        //getRandomArray(10, 1)





                        //function getRandomArray(length, max) {
                        //    var result = [];
                        //    for (var i = 0; i < length.length; i++) {
                        //        result[i] = Math.floor(Math.random（）* max);                              //随机数


                        //    }




                        //}








                        //var result=getRandomArray(10,100);



    </script>



    <script>
                        //12.不使用JavaScript内置函数，将一个字符串顺序颠倒，比如：'hello,yuanzhan' 变成 'nahznauy,olleh'
                        //function order(reverse){
                        //    var reverseFinish='';
                        //    for (var i = reverse.length - 1; i >= 0;i--){
                        //        reverseFinish += reverse[i];
                        //    }
                        //    console.log(reverseFinish);
                        //    //return reverseFinish;
                        //}
                        //console.log(order('hello yuanzhan'));
    </script>


    <script>
                        //13.统计出这段文字中有多少个单词
                        //There are two ways to create a RegExp object : a literal notation and a constructor.
                        //To indicate strings , the parameters to the literal notation do not use quotation marks
                        //while the parameters to the constructor function do use quotation-marks.
                        //So the following expressions create the same regular expression

    </script>


    <script>
                        //JavaScript - 3 homework
                        //title
                        //构建一个函数has9(number) ，可以判断number中是否带有数字9；
                        //构建一个函数has8(number) ，可以判断number中是否带有数字8；

                        //构建一个函数has6(number) ，可以判断number中是否带有数字6；

                        //使用上述函数，找出10000以内有多少个数字包含：9或者8或者6。

                        //使用“模拟名称空间”技术，构建一个函数函数yz.fei.get986(number) ；

                        //在yz.fei.get986(number)中包含不带参数的函数has9() / has8() / has6() ；



                        //让get986()通过调用has9() / has8() / has6() ，能找出number以内有多少个数字包含：9或者8或6。


                        //测试用例
                        //hasx（9，NaN）;
                        //hasx()


                        //function hasX(x, number) {
                        //    if (isNaN(number)) {
                        //       // console.log(number + '不是数字');
                        //        return false;
                        //    }
                        //    if (number < 0) {
                        //        //console.log(number + '不是正数');
                        //        return false;
                        //    }
                        //    if (number.toString().indexOf('.') > -1) {
                        //       // console.log(number + '是小数');
                        //        return false;
                        //    }
                        //    if (number.toString().indexOf(x) > -1) {
                        //       // console.log(number + '含有数字' + x);

                        //    } else {
                        //        //console.log(number + '不含有数字' + x);
                        //    }
                        //}

                        //var result = has9(9, number);

                        //var result = has8(8, number);

                        //var result = has6(6, number);




    </script>


    <script>
                        //使用上述函数，找出10000以内有多少个数字包含：9或者8或者6。

                        //var result = has9(9, number);
                        //var result = has8(8, number);
                        //var result = has6(6, number);


                        //var counter = 0;
                        //for (var i = 0; i < 10000; i++) {
                        //    if (has9(9,i)||has8(8,i)||has6(6,i)) {
                        //        counter++;
                        //    }
                        //} return counter;
                        //console.log('10000以内有'+counter+'数字包含9或者8或者6');







                        //使用“模拟名称空间”技术，构建一个函数函数yz.fei.get986(number) ；

                        //var yz = {};
                        //yz.fei = {};
                        //yz.fei.get986 = function(){
                        // var counter = 0;
                        //for (var i = 0; i < 10000; i++) {
                        //    if (has9(9,i)||has8(8,i)||has6(6,i)) {
                        //        counter++;
                        //    }
                        //} return counter;
                        //console.log('10000以内有'+counter+'数字包含9或者8或者6');
                        //}

                        //在yz.fei.get986(number)中包含不带参数的函数has9() / has8() / has6() ；







    </script>



















</body>
</html>